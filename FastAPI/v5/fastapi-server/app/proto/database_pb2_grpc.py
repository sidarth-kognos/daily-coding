# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

#import database_service_pb2 as database__service__pb2
from . import database_pb2 as database__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in database_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRecord = channel.unary_unary(
                '/database.DatabaseService/CreateRecord',
                request_serializer=database__service__pb2.CreateRecordRequest.SerializeToString,
                response_deserializer=database__service__pb2.CreateRecordResponse.FromString,
                _registered_method=True)
        self.GetRecord = channel.unary_unary(
                '/database.DatabaseService/GetRecord',
                request_serializer=database__service__pb2.GetRecordRequest.SerializeToString,
                response_deserializer=database__service__pb2.GetRecordResponse.FromString,
                _registered_method=True)
        self.UpdateRecord = channel.unary_unary(
                '/database.DatabaseService/UpdateRecord',
                request_serializer=database__service__pb2.UpdateRecordRequest.SerializeToString,
                response_deserializer=database__service__pb2.UpdateRecordResponse.FromString,
                _registered_method=True)
        self.DeleteRecord = channel.unary_unary(
                '/database.DatabaseService/DeleteRecord',
                request_serializer=database__service__pb2.DeleteRecordRequest.SerializeToString,
                response_deserializer=database__service__pb2.DeleteRecordResponse.FromString,
                _registered_method=True)
        self.ListRecords = channel.unary_unary(
                '/database.DatabaseService/ListRecords',
                request_serializer=database__service__pb2.ListRecordsRequest.SerializeToString,
                response_deserializer=database__service__pb2.ListRecordsResponse.FromString,
                _registered_method=True)
        self.RunMigration = channel.unary_unary(
                '/database.DatabaseService/RunMigration',
                request_serializer=database__service__pb2.MigrationRequest.SerializeToString,
                response_deserializer=database__service__pb2.MigrationResponse.FromString,
                _registered_method=True)
        self.GetMigrationStatus = channel.unary_unary(
                '/database.DatabaseService/GetMigrationStatus',
                request_serializer=database__service__pb2.MigrationStatusRequest.SerializeToString,
                response_deserializer=database__service__pb2.MigrationStatusResponse.FromString,
                _registered_method=True)
        self.CreateTable = channel.unary_unary(
                '/database.DatabaseService/CreateTable',
                request_serializer=database__service__pb2.CreateTableRequest.SerializeToString,
                response_deserializer=database__service__pb2.CreateTableResponse.FromString,
                _registered_method=True)
        self.AddColumn = channel.unary_unary(
                '/database.DatabaseService/AddColumn',
                request_serializer=database__service__pb2.AddColumnRequest.SerializeToString,
                response_deserializer=database__service__pb2.AddColumnResponse.FromString,
                _registered_method=True)
        self.DropColumn = channel.unary_unary(
                '/database.DatabaseService/DropColumn',
                request_serializer=database__service__pb2.DropColumnRequest.SerializeToString,
                response_deserializer=database__service__pb2.DropColumnResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/database.DatabaseService/HealthCheck',
                request_serializer=database__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=database__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateRecord(self, request, context):
        """Basic CRUD operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunMigration(self, request, context):
        """Database migration operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMigrationStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddColumn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropColumn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRecord,
                    request_deserializer=database__service__pb2.CreateRecordRequest.FromString,
                    response_serializer=database__service__pb2.CreateRecordResponse.SerializeToString,
            ),
            'GetRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecord,
                    request_deserializer=database__service__pb2.GetRecordRequest.FromString,
                    response_serializer=database__service__pb2.GetRecordResponse.SerializeToString,
            ),
            'UpdateRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRecord,
                    request_deserializer=database__service__pb2.UpdateRecordRequest.FromString,
                    response_serializer=database__service__pb2.UpdateRecordResponse.SerializeToString,
            ),
            'DeleteRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRecord,
                    request_deserializer=database__service__pb2.DeleteRecordRequest.FromString,
                    response_serializer=database__service__pb2.DeleteRecordResponse.SerializeToString,
            ),
            'ListRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRecords,
                    request_deserializer=database__service__pb2.ListRecordsRequest.FromString,
                    response_serializer=database__service__pb2.ListRecordsResponse.SerializeToString,
            ),
            'RunMigration': grpc.unary_unary_rpc_method_handler(
                    servicer.RunMigration,
                    request_deserializer=database__service__pb2.MigrationRequest.FromString,
                    response_serializer=database__service__pb2.MigrationResponse.SerializeToString,
            ),
            'GetMigrationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMigrationStatus,
                    request_deserializer=database__service__pb2.MigrationStatusRequest.FromString,
                    response_serializer=database__service__pb2.MigrationStatusResponse.SerializeToString,
            ),
            'CreateTable': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTable,
                    request_deserializer=database__service__pb2.CreateTableRequest.FromString,
                    response_serializer=database__service__pb2.CreateTableResponse.SerializeToString,
            ),
            'AddColumn': grpc.unary_unary_rpc_method_handler(
                    servicer.AddColumn,
                    request_deserializer=database__service__pb2.AddColumnRequest.FromString,
                    response_serializer=database__service__pb2.AddColumnResponse.SerializeToString,
            ),
            'DropColumn': grpc.unary_unary_rpc_method_handler(
                    servicer.DropColumn,
                    request_deserializer=database__service__pb2.DropColumnRequest.FromString,
                    response_serializer=database__service__pb2.DropColumnResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=database__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=database__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'database.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('database.DatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/CreateRecord',
            database__service__pb2.CreateRecordRequest.SerializeToString,
            database__service__pb2.CreateRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/GetRecord',
            database__service__pb2.GetRecordRequest.SerializeToString,
            database__service__pb2.GetRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/UpdateRecord',
            database__service__pb2.UpdateRecordRequest.SerializeToString,
            database__service__pb2.UpdateRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/DeleteRecord',
            database__service__pb2.DeleteRecordRequest.SerializeToString,
            database__service__pb2.DeleteRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/ListRecords',
            database__service__pb2.ListRecordsRequest.SerializeToString,
            database__service__pb2.ListRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunMigration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/RunMigration',
            database__service__pb2.MigrationRequest.SerializeToString,
            database__service__pb2.MigrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMigrationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/GetMigrationStatus',
            database__service__pb2.MigrationStatusRequest.SerializeToString,
            database__service__pb2.MigrationStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/CreateTable',
            database__service__pb2.CreateTableRequest.SerializeToString,
            database__service__pb2.CreateTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddColumn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/AddColumn',
            database__service__pb2.AddColumnRequest.SerializeToString,
            database__service__pb2.AddColumnResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropColumn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/DropColumn',
            database__service__pb2.DropColumnRequest.SerializeToString,
            database__service__pb2.DropColumnResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/HealthCheck',
            database__service__pb2.HealthCheckRequest.SerializeToString,
            database__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
